import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from tkinter import*
import os
from pandas import DataFrame
import math
from scipy import integrate
from scipy.integrate import dblquad


#############建立窗口#########
root = Tk()#建立tkinter窗口
root.title("温度范围")# 设置标题
Label(root, text='中心波长1：').grid(row=0, column=0)# 设置标签，Grid()网格
Label(root, text='中心波长2：').grid(row=1, column=0)# 选项row代表行，column代表列
Label(root, text='eff1：').grid(row=2, column=0)
Label(root, text='efb1：').grid(row=3, column=0)
Label(root, text='半波长范围1：').grid(row=0, column=2)
Label(root, text='半波长范围2：').grid(row=1, column=2)
Label(root, text='eff2：').grid(row=2, column=2)
Label(root, text='efb2：').grid(row=3, column=2)
e1 = Entry(root)# 输入框
e2 = Entry(root)
e3 = Entry(root)
e4 = Entry(root)
e5 = Entry(root)
e6 = Entry(root)
e7 = Entry(root)
e8 = Entry(root)
e1.grid(row=0, column=1, padx=20, pady=10)
e2.grid(row=1, column=1, padx=20, pady=10)
e3.grid(row=2, column=1, padx=20, pady=10)
e4.grid(row=3, column=1, padx=20, pady=10)
e5.grid(row=0, column=3, padx=20, pady=10)
e6.grid(row=1, column=3, padx=20, pady=10)
e7.grid(row=2, column=3, padx=20, pady=10)
e8.grid(row=3, column=3, padx=20, pady=10)
####################################################
def visualization():
    a =int(e1.get())
    b =int(e2.get())
    cf1 =float(e3.get())
    d1 =float(e4.get())
    z1 =float(e5.get())
    z2 =float(e6.get())
    d2 =float(e7.get())
    cf2 =float(e8.get())



    #######设置图表格式######

    a1=(a-z1) ####波长1的左端
    a2=(a+z1) ####波长1的右端
    b1=(b-z2) ####波长2的左端
    b2=(b+z2) ####波长2的右端
    #####读取数据########
    df_ArI=pd.read_csv('Ar I_Spectral Emission intensity_Ritz Wavelength_转置.csv', index_col=0, header= 0)
    df_ArII=pd.read_csv('Ar II_Spectral Emission intensity_Ritz Wavelength_转置.csv', index_col=0, header= 0)
    df_ArIII=pd.read_csv('Ar III_Spectral Emission intensity_Ritz Wavelength_转置.csv',index_col=0, header= 0)
    df_parameter=pd.read_csv('Parameter_Ar.csv', index_col=0, header= 0)

    #####设置读取数据范围########
    ########波长1##############
    wavelength1_ArI = df_ArI.loc[ a1:a2 ]
    wavelength1_ArII = df_ArII.loc[ a1:a2 ]
    wavelength1_ArIII = df_ArIII.loc[ a1:a2 ]
    df11=wavelength1_ArI.T
    df21=wavelength1_ArII.T
    df31=wavelength1_ArIII.T

    df11['Intensity_ArI'] = df11.apply(np.sum, axis=1)
    df21['Intensity_ArII'] = df21.apply(np.sum, axis=1)
    df31['Intensity_ArIII'] = df31.apply(np.sum, axis=1)
    #####################波长2########
    wavelength2_ArI = df_ArI.loc[ b1:b2 ]
    wavelength2_ArII = df_ArII.loc[ b1:b2 ]
    wavelength2_ArIII = df_ArIII.loc[ b1:b2 ]
    df12=wavelength2_ArI.T
    df22=wavelength2_ArII.T
    df32=wavelength2_ArIII.T

    df12['Intensity_ArI'] = df12.apply(np.sum, axis=1)
    df22['Intensity_ArII'] = df22.apply(np.sum, axis=1)
    df32['Intensity_ArIII'] = df32.apply(np.sum, axis=1)
    #####设置坐标轴数据#####


    # ##########线光计算######
    df11=df11['Intensity_ArI']
    df21=df21['Intensity_ArII']
    df31=df31['Intensity_ArIII']
    e1_spectral = df11+df21+df31

    df12=df12['Intensity_ArI']
    df22=df22['Intensity_ArII']
    df32=df32['Intensity_ArIII']
    e2_spectral = df12+df22+df32

    # ##########连续光计算######
    Cei = 1.632 * 10**(-43)
    Cea = 1.026 * 10**(-34)
    h = 6.62607004*10**(-34)
    c = 299792458
    k = 1.38064852*10**(-23)
    Z_ArI = 1
    Z_ArII = 2
    eff1 = cf1
    efb1 = d1
    eff2 = cf2
    efb2 = d2
    a1=int((a-z1)*10) ####波长1的左端
    a2=int((a+z1)*10) ####波长1的右端
    b1=int((b-z2)*10) ####波长2的左端
    b2=int((b+z2)*10) ####波长2的右端

    ######ArI 连续光######
    #######εfb Ar II-I
    e1fb_ArII_ArI = 0
    for wavelength in range(a1, a2+1,1):
            e1fb_ArII_ArI += Cei *df_parameter['n AII[m-3]'] *df_parameter['ne[m-3]']*Z_ArI**2\
                        *(1-np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*df_parameter['g/Z(T)1']*efb1\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e1fb_ArII_ArI=e1fb_ArII_ArI*10**(-10)

    #######εfb Ar III-II
    e1fb_ArIII_ArII = 0
    for wavelength in range(a1, a2+1,1):
            e1fb_ArIII_ArII += Cei *df_parameter['n AIII[m-3]'] *df_parameter['ne[m-3]']*Z_ArII**2\
                              *(1-np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*df_parameter['g/Z(T)2']*efb1\
                              /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e1fb_ArIII_ArII=e1fb_ArIII_ArII*10**(-10)

    #####εff ea 
    e1ff_ea = 0
    for wavelength in range(a1, a2+1,1):
            e1ff_ea += Cea *df_parameter['na [m-3]'] *df_parameter['ne[m-3]']*df_parameter['Q(Te)(m-2)']\
                    *(1+(1+h*c/(k*df_parameter['T']*wavelength*10**(-10)))**2)*(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))\
                    *df_parameter['T']**1.5/((wavelength*10**(-10))**2)
    e1ff_ea=e1ff_ea*10**(-10)

    #####εff eAr II
    e1ff_eAr_II = 0
    for wavelength in range(a1, a2+1,1):
            e1ff_eAr_II += Cei *df_parameter['n AII[m-3]'] *df_parameter['ne[m-3]']*Z_ArI**2\
                        *(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*eff1\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e1ff_eAr_II=e1ff_eAr_II*10**(-10)

    #####εff eAr III
    e1ff_eAr_III = 0
    for wavelength in range(a1, a2+1,1):
            e1ff_eAr_III +=  Cei *df_parameter['n AIII[m-3]'] *df_parameter['ne[m-3]']*Z_ArI**2\
                        *(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*eff1\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e1ff_eAr_III=e1ff_eAr_III*10**(-10)

    #####总连续光#####
    e1_contiumn = e1fb_ArII_ArI + e1fb_ArIII_ArII + e1ff_ea + e1ff_eAr_II + e1ff_eAr_III

    ######总发光强度###
    e1_all = np.array(e1_spectral) + np.array(e1_contiumn)
    T=np.arange(3000,30001,100,)
    numpy_data = np.array([T,e1_all]).T
    e1_all = pd.DataFrame(data=numpy_data)
    ######取目标列的数据#######
    e1_all=e1_all.iloc[:,[1]]

    ##############################################################################################################
    ######ArI 连续光######
    #######εfb Ar II-I
    e2fb_ArII_ArI = 0
    for wavelength in range(b1, b2+1,1):
            e2fb_ArII_ArI += Cei *df_parameter['n AII[m-3]'] *df_parameter['ne[m-3]']*Z_ArI**2\
                        *(1-np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*df_parameter['g/Z(T)1']*efb2\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e2fb_ArII_ArI=e2fb_ArII_ArI*10**(-10)

    #######εfb Ar III-II
    e2fb_ArIII_ArII = 0
    for wavelength in range(b1, b2+1,1):
            e2fb_ArIII_ArII += Cei *df_parameter['n AIII[m-3]'] *df_parameter['ne[m-3]']*Z_ArII**2\
                              *(1-np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*df_parameter['g/Z(T)2']*efb2\
                              /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e2fb_ArIII_ArII=e2fb_ArIII_ArII*10**(-10)

    #####εff ea 
    e2ff_ea = 0
    for wavelength in range(b1, b2+1,1):
            e2ff_ea += Cea *df_parameter['na [m-3]'] *df_parameter['ne[m-3]']*df_parameter['Q(Te)(m-2)']\
                    *(1+(1+h*c/(k*df_parameter['T']*wavelength*10**(-10)))**2)*(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))\
                    *df_parameter['T']**1.5/((wavelength*10**(-10))**2)
    e2ff_ea=e2ff_ea*10**(-10)

    #####εff eAr II
    e2ff_eAr_II = 0
    for wavelength in range(b1, b2+1,1):
            e2ff_eAr_II += Cei *df_parameter['n AII[m-3]'] *df_parameter['ne[m-3]']*Z_ArI**2\
                        *(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*eff2\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e2ff_eAr_II=e2ff_eAr_II*10**(-10)

    #####εff eAr III
    e2ff_eAr_III = 0
    for wavelength in range(b1, b2+1,1):
            e2ff_eAr_III +=  Cei *df_parameter['n AIII[m-3]'] *df_parameter['ne[m-3]']*Z_ArII**2\
                        *(np.exp(-h*c/(k*df_parameter['T']*wavelength*10**(-10))))*eff2\
                          /(df_parameter['T']**0.5*((wavelength*10**(-10))**2))
    e2ff_eAr_III=e2ff_eAr_III*10**(-10)

    #####总连续光#####
    e2_contiumn = e2fb_ArII_ArI + e2fb_ArIII_ArII + e2ff_ea + e2ff_eAr_II + e2ff_eAr_III

    ######总发光强度###
    e2_all = np.array(e2_spectral) + np.array(e2_contiumn)
    T=np.arange(3000,30001,100,)
    numpy_data = np.array([T,e2_all]).T
    e2_all = pd.DataFrame(data=numpy_data)
    ######取目标列的数据#######
    e2_all=e2_all.iloc[:,[1]]

    ###########计算比率##########

    ratio = e1_all/e2_all

    #####设置坐标轴数据#####
    X = np.linspace(3000, 30000, num=271, endpoint=True)

    y = ratio

    #########比率曲线##########
    plt.figure(figsize=(4,4), dpi=80)
    plt.subplot(221)

    ax1 = plt.subplot(221)
    ax1.set_title('ratio')
    ax1.spines['right'].set_color('none')
    ax1.spines['top'].set_color('none')
    ax1.xaxis.set_ticks_position('bottom')
    ax1.yaxis.set_ticks_position('left')
    plt.plot(y, X, linewidth=2.5, linestyle="-")
    ############波长1曲线##############
    ax2 = plt.subplot(222)
    ax2.set_title('wavelength1_all emission intensity')
    ax2.spines['right'].set_color('none')
    ax2.spines['top'].set_color('none')
    ax2.xaxis.set_ticks_position('bottom')
    ax2.yaxis.set_ticks_position('left')
    plt.plot(X, e1_all, linewidth=2.5, linestyle="-")

    ############波长2曲线##############
    ax3 = plt.subplot(223)
    ax3.set_title('wavelength2_2all emission intensity')
    ax3.spines['right'].set_color('none')
    ax3.spines['top'].set_color('none')
    ax3.xaxis.set_ticks_position('bottom')
    ax3.yaxis.set_ticks_position('left')
    plt.plot(X, e2_all, linewidth=2.5, linestyle="-")
    ##########################################
    #######################输出csv文件###########
   
    plt.show()
    output_folder = '.'
    output_path = output_folder
    T=np.arange(3000,30001,100,)
    numpy_data = np.array([T,df12,df22,df32,e2fb_ArII_ArI,e2fb_ArIII_ArII,e2ff_ea,e2ff_eAr_II,e2ff_eAr_III]).T
    numpy_data = np.array([T,df11,df21,df31,e1fb_ArII_ArI,e1fb_ArIII_ArII,e1ff_ea,e1ff_eAr_II,e1ff_eAr_III]).T
    e1_all = pd.DataFrame(data=numpy_data)
    e1_all.to_csv(output_path, 'result_wavelength1.csv')
    e2_all = pd.DataFrame(data=numpy_data)
    e2_all.to_csv(output_path, 'result_wavelength2.csv')

########循环输入########
Button(root, text='获取参数并继续', width=20, command=visualization) \
.grid(row=4, column=1, sticky=E, padx=10, pady=5)# 退出直接调用根窗口的quit方法
mainloop()
